{"ast":null,"code":"import _slicedToArray from \"/Users/fredhertlein/Documents/GitHub/gpt2-react-flask/gpt-2-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/fredhertlein/Documents/GitHub/gpt2-react-flask/gpt-2-frontend/src/App.js\";\nimport React, { useState } from 'react';\nimport Button from './components/Button';\nimport SelectBox from './components/SelectBox';\nimport TextBox from './components/TextBox';\nimport './styles.scss';\nimport { postGenerateTextEndpoint } from './utils';\n\nfunction App() {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _useState3 = useState('gpt2'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        model = _useState4[0],\n        setModel = _useState4[1];\n\n  const _postGenerateTextEndp = postGenerateTextEndpoint(),\n        _postGenerateTextEndp2 = _slicedToArray(_postGenerateTextEndp, 2),\n        generatedText = _postGenerateTextEndp2[0],\n        postGenerateText = _postGenerateTextEndp2[1];\n\n  const generateText = () => {\n    postGenerateText({\n      text,\n      model,\n      userId: 1\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Medical Coding Automation\"), React.createElement(SelectBox, {\n    model: model,\n    setModel: setModel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(TextBox, {\n    text: text,\n    setText: setText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), generatedText.pending && React.createElement(\"div\", {\n    className: \"result pending\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Please wait\"), generatedText.complete && (generatedText.error ? React.createElement(\"div\", {\n    className: \"result error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Bad Request\") : React.createElement(\"div\", {\n    className: \"result valid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, generatedText.data.result)));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/fredhertlein/Documents/GitHub/gpt2-react-flask/gpt-2-frontend/src/App.js"],"names":["React","useState","Button","SelectBox","TextBox","postGenerateTextEndpoint","App","text","setText","model","setModel","generatedText","postGenerateText","generateText","userId","pending","complete","error","data","result"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAO,eAAP;AACA,SAASC,wBAAT,QAAyC,SAAzC;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACWL,QAAQ,CAAC,EAAD,CADnB;AAAA;AAAA,QACNM,IADM;AAAA,QACAC,OADA;;AAAA,qBAEaP,QAAQ,CAAC,MAAD,CAFrB;AAAA;AAAA,QAENQ,KAFM;AAAA,QAECC,QAFD;;AAAA,gCAG6BL,wBAAwB,EAHrD;AAAA;AAAA,QAGNM,aAHM;AAAA,QAGSC,gBAHT;;AAKb,QAAMC,YAAY,GAAG,MAAM;AACzBD,IAAAA,gBAAgB,CAAC;AAAEL,MAAAA,IAAF;AAAQE,MAAAA,KAAR;AAAeK,MAAAA,MAAM,EAAE;AAAvB,KAAD,CAAhB;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,YAAY,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEL,KAAlB;AAAyB,IAAA,QAAQ,EAAEC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEH,IAAf;AAAqB,IAAA,OAAO,EAAEC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,EAOGG,aAAa,CAACI,OAAd,IACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARJ,EAUGJ,aAAa,CAACK,QAAd,KACEL,aAAa,CAACM,KAAd,GACC;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,GAEC;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,aAAa,CAACO,IAAd,CAAmBC,MADtB,CAHH,CAVH,CADF;AAmBD;;AAED,eAAeb,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport Button from './components/Button';\nimport SelectBox from './components/SelectBox';\nimport TextBox from './components/TextBox';\nimport './styles.scss';\nimport { postGenerateTextEndpoint } from './utils';\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [model, setModel] = useState('gpt2');\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\n\n  const generateText = () => {\n    postGenerateText({ text, model, userId: 1 });\n  }\n\n  return (\n    <div className='app-container'>\n      <form noValidate autoComplete='off'>\n        <h1>Medical Coding Automation</h1>\n        <SelectBox model={model} setModel={setModel} />\n        <TextBox text={text} setText={setText} />\n      </form>\n    \n      {generatedText.pending &&\n        <div className='result pending'>Please wait</div>}\n\n      {generatedText.complete &&\n        (generatedText.error ?\n          <div className='result error'>Bad Request</div> :\n          <div className='result valid'>\n            {generatedText.data.result}\n          </div>)}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}